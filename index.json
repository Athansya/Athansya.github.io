[{"content":" Introduction- For some time now, I\u0026rsquo;ve been searching the best way to create a reproducible development environment that avoids me the tedious task of installing and configuring my work tools over and over again, I\u0026rsquo;m talking about you, VIM. I know there are several tools to manage the famous .dot files, but I wanted to find a way to group everything together. That\u0026rsquo;s when I found Nix, a functional language that acts as a package manager and simplifies the creation of reproducible environments; there\u0026rsquo;s even a Linux distribution that revolves around it, NixOs and as you might guess, it allows to configure and manager your system. After a couple days of trying to understand the syntax of the language, I accomplish my goal. Here\u0026rsquo;s how I did it.\nFirst steps WSL First of all, we have to enable and install Windows Subsytem for Linux (WSL). Let\u0026rsquo;s open PowerShell as administrator and run:\nwsl --install Note\nIf it does not allow you to do so, its most likely that your system has disable that option. To enable it, run:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Then, reboot your system.\nNow, let\u0026rsquo;s choose a distribution of your liking, in my case I chose Alpine for its lightness and not having bloatware. To see a list of available distributions for installation, run:\nwsl --list --online # Once you\u0026#39;ve selected one of your liking, run wsl --install --distribution \u0026lt;Name\u0026gt; In case you want another one, I suggest you to look up online. Once you have your distribution installed and have made the initial configuration (e.g. creating a user, password and updating your system sudo apt update \u0026amp;\u0026amp; sudo apt upgrade), you will be ready to install Nix.\nNix Nix installation is pretty straight forward. Open WSL and run:\n1sh \u0026lt;(curl -L https://nixos.org/nix/install) --no-daemon 2# To test your installation, run 3nix --version 4# Restart your session if necessary Home-Manager Okay, assuming you have a functional Nix installation, let\u0026rsquo;s move on with Home-Manager, a tool that will allow us to manage our user environment, allowing to declare the packages we want to install as well as their respective configurations.\nFirst, given we are not using NixOs, we need to run the following command:\nexport NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH} Then, let\u0026rsquo;s add a new package source and update the list:\n1nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager 2nix-channel --update Now, let\u0026rsquo;s install home-manager\nnix-shell \u0026#39;\u0026lt;home-manager\u0026gt;\u0026#39; -A install The only thing that\u0026rsquo;s left is editing home-manager configuration file located in $HOME/.config/nixpkgs/home.nix.\nSetting up our environment Editing home.nix may be as hard as you want it to be. It all depends on the level of customization your want to achieve. You may use the following code as a template to start:\n1{ config, pkgs, ... }: 2 3{ 4 # Home manager needs information about you 5\tand the directory it will manage 6\thome.username = \u0026#34;\u0026lt;user\u0026gt;\u0026#34;; 7\thome.homeDirectory = \u0026#34;/home/\u0026lt;user\u0026gt;\u0026#34;; 8 9\t# Optional ** Session variables 10\thome.sessionVariables = { 11\tEDITOR = \u0026#34;\u0026lt;TextEditor\u0026gt;\u0026#34;; 12 }; 13 14\t# Packages to install without configuration 15\thome.packages = with pkgs; [ 16\t/* 17\t. 18\t. 19\t. 20\t*/ 21 ]; 22 23 # Packages to install and configure 24\tprograms = { 25\t/* 26\te.g 27\tgit = { 28 enable = true; 29 usernName = \u0026#34;\u0026lt;user\u0026gt;\u0026#34;; 30 userEmail = \u0026#34;\u0026lt;email\u0026gt;\u0026#34;; 31 }; 32\t. 33\t. 34\t. 35\t*/ 36 }; 37 38 39\t/* This value determines the Home Manager release that your 40\tconfiguration is compatible with. This helps avoid breakage 41\twhen a new Home Manager release introduces backwards 42\tincompatible changes. 43 44\tYou can update Home Mangaer without changing this value. See 45\tthe Home Manager release notes for a list of state version 46\tchanges in each release. 47\t*/ 48\thome.stateVersion = \u0026#34;22.05\u0026#34;; 49 50 # let Home Manager install and manage itself. 51\tprograms.home-manager.enable = true; 52} You can use NixOs wiki and its search bar to find packages and their respective configuration options. At the end, you could end up with a file like mine. Once you\u0026rsquo;ve finished, you need to activate your new configuration:\nhome-manager switch And that\u0026rsquo;s all, you now have a functional development environment. I recommend you to create a repository to make it accesible from different machines.\nFinal notes To wrap things up, I would like to talk about the concept of generation. Every time we make a change in our configuration, in both Nix and Home Manager, a new generation is produced. In case we have a problem with the new changes, we can always go back to the previous version (rollback). To list and manipulate the generations available in our system we use the following commands:\nNix\n1# List generations 2nix-env --list-generations 3 4# Rollback to previous gen 5nix-env --rollback 6 7# Change to a specific gen 8nix-env --switch-generation \u0026lt;id-generación\u0026gt; 9 10# Delete certain gens 11nix-env --delete-generations \u0026lt;id-generaciones separados por espacios\u0026gt; 12 13# Delete certain gens except the las \u0026lt;N\u0026gt; 14nix-env --delete-generations +\u0026lt;N\u0026gt; 15 16# Delete all gens except for the current one 17nix-env --delete-generations old 18 19# Garbage collection 20nix-collect-garbage Home Manager\n1# List generations 2home-manager generations 3 4# Delete certain gens 5home-manager remove-generations \u0026lt;id-generaciones separados por espacios\u0026gt; 6 7# Delete gens before \u0026lt;timestamp\u0026gt; (e.g. -30 days) 8home-manager expire-generations \u0026lt;timestamp\u0026gt; Info\nIt is not currently possible to change generations in home-manager with a simple command, but the way of doing it is the following:\nList generations and identify the ID of your liking: home-manager generations Copy the ID\u0026rsquo;s path -\u0026gt; (e.g./nix/store/kahm1rxk77mnvd2l8pfvd4jkkffk5ijk-home-manager-generation) Run the activate script located in: /nix/store/kahm1rxk77mnvd2l8pfvd4jkkffk5ijk-home-manager-generation/activate. References NixOs, \u0026ldquo;Getting Nix / NixOs\u0026rdquo; n.d. [Online]. Available: https://nixos.org/download.html#nix-install-windows. NixOs Wiki, \u0026ldquo;Home Manager\u0026rdquo; n.d. [Online]. Available: https://nixos.wiki/wiki/Home_Manager. Nix Community, \u0026ldquo;Home Manager Manual\u0026rdquo; n.d. [Online]. Available: https://nix-community.github.io/home-manager/. F. Mouaffo, \u0026ldquo;Nix introduction, Main Concepts and commands\u0026rdquo; Adaltas 01-Feb-2022. [Online]. Available: https://www.adaltas.com/en/2022/02/01/nix-introduction/. C. Bailey, \u0026ldquo;A minimal development environment on WSL\u0026rdquo; 04-Apr-2021. [Online]. Available: https://cbailey.co.uk/posts/a_minimal_nix_development_environment_on_wsl. M. Gheda, \u0026ldquo;Tutorial: Getting started with Home Manager for Nix\u0026rdquo; 05-April-2021. [Online]. Available: https://ghedam.at/24353/tutorial-getting-started-with-home-manager-for-nix NixOs Wiki, \u0026ldquo;Nix Cookbook: Managing storage\u0026rdquo; n.d. [Online]. Available: https://nixos.wiki/wiki/Nix_Cookbook. A. Pearce, \u0026ldquo;Managing dotfiles with Nix\u0026rdquo; 27-Jul-2021. [Online]. Available: https://alexpearce.me/2021/07/managing-dotfiles-with-nix/. ","permalink":"https://athansya.github.io/posts/tools/wsl/minimal_alpine_development_wsl/","summary":"Introduction- For some time now, I\u0026rsquo;ve been searching the best way to create a reproducible development environment that avoids me the tedious task of installing and configuring my work tools over and over again, I\u0026rsquo;m talking about you, VIM. I know there are several tools to manage the famous .dot files, but I wanted to find a way to group everything together. That\u0026rsquo;s when I found Nix, a functional language that acts as a package manager and simplifies the creation of reproducible environments; there\u0026rsquo;s even a Linux distribution that revolves around it, NixOs and as you might guess, it allows to configure and manager your system.","title":"Nix + Home-manager for development environments in WSL"},{"content":"Hello again, My name is Alfonso, a mexican biomedical engineer and soon to be a master´s student in computer sciences. I always enjoyed life sciences and math, but quite recently discovered my love for programming. I thoroughly enjoy learning on my own about my different interests: programming, medical imaging, mathematics, artificial intelligence, languages, etcetera. I love sharing my knowledge and teaching others, so making a website seemed like a terrific idea.\nOther hobbies of mine are: singing, exercising, reading and going out in search of the best food. I want to devote myself to researching and teaching at a university, although I don\u0026rsquo;t rule out the idea of continuing to share my knowledge online. I\u0026rsquo;ve work in a couple of research projects related to medical image and signal processing with artificial intelligence. For a better description of my academic and work life, I invite you to check out my CV.\nAbstract portrait (2016)\n","permalink":"https://athansya.github.io/about/","summary":"Hello again, My name is Alfonso, a mexican biomedical engineer and soon to be a master´s student in computer sciences. I always enjoyed life sciences and math, but quite recently discovered my love for programming. I thoroughly enjoy learning on my own about my different interests: programming, medical imaging, mathematics, artificial intelligence, languages, etcetera. I love sharing my knowledge and teaching others, so making a website seemed like a terrific idea.","title":"About me"},{"content":"","permalink":"https://athansya.github.io/categories/","summary":"","title":"Categories"}]