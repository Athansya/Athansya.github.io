[{"content":" Introducción - Desde hace tiempo, he estado buscando la mejor manera de crear un entorno de desarrollo reproducible que me evite la tediosa tarea de instalar y configurar mis herramientas de trabajo, te estoy hablando a ti VIM. Sé que existen diferentes formas de manejar los famosos archivos .dot, pero quería encontrar una manera de agrupar todo. Fue entonces que me topé con Nix, un lenguaje funcional que actúa como gestor de paquetes y facilita la creación de entornos reproducibles; inclusive existe una distribución de Linux que gira en torno a Nix, se llama NixOs y como podrás adivinar, permite configurar tu sistema y paquetes de manera declarativa y reproducible. Volviendo al tema, estuve varios días partiendome la cabeza intentando entender la sintáxis del lenguaje, pero al final logré mi cometido. Aquí te contaré cómo.\nPrimeros pasos WSL Primero que nada, hay que habilitar e instalar Windows Subsystem for Linux (WSL). Abrimos PowerShell como administrador y ejecutamos:\nwsl --install Nota\nOjo, si no te lo permite, lo más seguro es que no tengas habilitada la opción. Para hacerlo ejecuta primero:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Luego, reinicia tu computadora para que los cambios tengan efecto.\nAhora toca elegir una distribución de tu agrado, en mi caso elegí Alpine por ser ligera y no contar con nada adicional, pero la mayoría se siente más cómodo con alguna distribución basada en Debian. Para ver una lista de las distribuciones disponibles para instalar ingresa:\n1wsl --list --online 2# Una vez hayas seleccionado una de tu agrado, ingresa 3wsl --install --distribution \u0026lt;Nombre\u0026gt; En caso de que quieras otra, te recomiendo buscar en línea. Una vez tengas tu distribución y hayas hecho las configuraciones iniciales como crear un usuario, contraseña y actualizar tu sistema (sudo apt update \u0026amp;\u0026amp; xsudo apt upgrade), entre otras; entonces estás listo para instalar Nix.\nNix La instalación de Nix es sencilla. Basta con abrir tu distribución e ingresar:\n1sh \u0026lt;(curl -L https://nixos.org/nix/install) --no-daemon 2# Para probar tu instalación, ingresa 3nix --version 4# Si no tienes respuesta, te recomiendo reiniciar tu distro Home-Manager Vale, asumiendo que tienes una instalación de Nix funcional, procederemos a instalar Home-manager, una herramienta que nos permitirá gestionar nuestro entorno de usuario de tal forma que podremos declarar los paquetes que queramos y sus respectivas configuraciones.\nPrimero, dado que no estamos usando NixOs, hay que ejecutar el siguiente comando para que lo demás funcione:\nexport NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH} Luego, agregaremos una fuente a nuestra lista de de paquetes y actualizaremos la lista:\n1nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager 2nix-channel --update Ahora, instalaremos home-manager\nnix-shell \u0026#39;\u0026lt;home-manager\u0026gt;\u0026#39; -A install Listo, lo único que resta es editar el archivo de configuración de home-manager ubicado en $HOME/.config/nixpkgs/home.nix.\nConfigurando nuestro entorno Editar home.nix puede ser tan difícil como tu desees. Todo depende del nivel de personalización que le quieras dar. El siguiente código puede servirte para empezar:\n1{ config, pkgs, ... }: 2 3{ 4 # Home manager necesita información sobre ti y 5\t# el directorio que manejará 6\thome.username = \u0026#34;\u0026lt;usuario\u0026gt;\u0026#34;; 7\thome.homeDirectory = \u0026#34;/home/\u0026lt;usuario\u0026gt;\u0026#34;; 8 9\t# Opcional ** Variables de la sesión 10\thome.sessionVariables = { 11\tEDITOR = \u0026#34;\u0026lt;editorDeTexto\u0026gt;\u0026#34;; 12 }; 13 14\t# Paquetes a instalar rápidamente 15\thome.packages = with pkgs; [ 16\t/* 17\t. 18\t. 19\t. 20\t*/ 21 ]; 22 23\t# Paquetes a instalar y configurar 24\tprograms = { 25\t/* 26\te.g 27\tgit = { 28 enable = true; 29 usernName = \u0026#34;\u0026lt;usuario\u0026gt;\u0026#34;; 30 userEmail = \u0026#34;\u0026lt;email\u0026gt;\u0026#34;; 31 }; 32\t. 33\t. 34\t. 35\t*/ 36 }; 37 38 39\t/* Este valor determina la versión de Home Manager con la que 40\ttu configuración es compatible. Esto ayuda a evitar errores 41\tcuando una nueva versión es incompatible con versiones previas. 42 43\tPuedes actualizar Home Manager sin cambiar este valor. Vea las 44\tnotas de versión de Home Manager para una lista de los cambios 45\tde cada lanzamiento. 46\t*/ 47\thome.stateVersion = \u0026#34;22.05\u0026#34;; 48 49\t# Permite que Home Manager se instale y configure a si mismo 50\tprograms.home-manager.enable = true; 51} Puedes utilizar el buscador y la wiki de NixOs para encontrar más paquetes y sus respectivas opciones de configuración. Al final, podrías terminar con un archivo como el mío. Una vez que hayas terminado, hay que activar la configuración con el siguiente comando:\nhome-manager switch Y eso es todo, ya tienes un entorno funcional de desarrollo. Te recomiendo crear un repositorio para descargarlo y activarlo cada vez que lo necesites.\nNotas finales Para concluir, me gustaría hablar sobre el concepto de generación. Cada vez que realizamos un cambio en nuestra configuración, tanto en Nix como en Home Manager, se produce una nueva generación. En caso de que tengamos algún problema con los nuevos cambios, siempre podemos volver a la versión anterior. Para listar y manipular las generaciones que tenemos respaldadas se utilizan los siguientes comandos:\nNix\n1# Lista las generaciones 2nix-env --list-generations 3 4# Regresar a la generación anterior 5nix-env --rollback 6 7# Cambia a una generación en específico 8nix-env --switch-generation \u0026lt;id-generación\u0026gt; 9 10# Borrar ciertas generaciones 11nix-env --delete-generations \u0026lt;id-generaciones separados por espacios\u0026gt; 12 13# Borrar las generaciones excepto las últimas \u0026lt;N\u0026gt; 14nix-env --delete-generations +\u0026lt;N\u0026gt; 15 16# Borrar todas las generaciones excepto la actual 17nix-env --delete-generations old 18 19# Recolección de basura 20nix-collect-garbage Home Manager\n1# Lista las generaciones 2home-manager generations 3 4# Borrar ciertas generaciones 5home-manager remove-generations \u0026lt;id-generaciones separados por espacios\u0026gt; 6 7# Borrar generaciones anteriores a \u0026lt;timestamp\u0026gt; (e.g. -30 days) 8home-manager expire-generations \u0026lt;timestamp\u0026gt; Información\nAún no es posible realizar cambiar de generación en home-manager con un simple comando, pero la manera de hacerlo es la siguiente:\nLista las generaciones e identifica la ID de tu preferencia: home-manager generations Copia la ruta a la que apunta esa ID -\u0026gt; (e.g./nix/store/kahm1rxk77mnvd2l8pfvd4jkkffk5ijk-home-manager-generation) Ejecuta el script activate de la ruta: /nix/store/kahm1rxk77mnvd2l8pfvd4jkkffk5ijk-home-manager-generation/activate. Referencias NixOs, \u0026ldquo;Getting Nix / NixOs\u0026rdquo; n.d. [Online]. Available: https://nixos.org/download.html#nix-install-windows. NixOs Wiki, \u0026ldquo;Home Manager\u0026rdquo; n.d. [Online]. Available: https://nixos.wiki/wiki/Home_Manager. Nix Community, \u0026ldquo;Home Manager Manual\u0026rdquo; n.d. [Online]. Available: https://nix-community.github.io/home-manager/. F. Mouaffo, \u0026ldquo;Nix introduction, Main Concepts and commands\u0026rdquo; Adaltas 01-Feb-2022. [Online]. Available: https://www.adaltas.com/en/2022/02/01/nix-introduction/. C. Bailey, \u0026ldquo;A minimal development environment on WSL\u0026rdquo; 04-Apr-2021. [Online]. Available: https://cbailey.co.uk/posts/a_minimal_nix_development_environment_on_wsl. M. Gheda, \u0026ldquo;Tutorial: Getting started with Home Manager for Nix\u0026rdquo; 05-April-2021. [Online]. Available: https://ghedam.at/24353/tutorial-getting-started-with-home-manager-for-nix NixOs Wiki, \u0026ldquo;Nix Cookbook: Managing storage\u0026rdquo; n.d. [Online]. Available: https://nixos.wiki/wiki/Nix_Cookbook. A. Pearce, \u0026ldquo;Managing dotfiles with Nix\u0026rdquo; 27-Jul-2021. [Online]. Available: https://alexpearce.me/2021/07/managing-dotfiles-with-nix/. ","permalink":"https://www.atorizv.tech/es/posts/tools/wsl/minimal_alpine_development_wsl/","summary":"Introducción - Desde hace tiempo, he estado buscando la mejor manera de crear un entorno de desarrollo reproducible que me evite la tediosa tarea de instalar y configurar mis herramientas de trabajo, te estoy hablando a ti VIM. Sé que existen diferentes formas de manejar los famosos archivos .dot, pero quería encontrar una manera de agrupar todo. Fue entonces que me topé con Nix, un lenguaje funcional que actúa como gestor de paquetes y facilita la creación de entornos reproducibles; inclusive existe una distribución de Linux que gira en torno a Nix, se llama NixOs y como podrás adivinar, permite configurar tu sistema y paquetes de manera declarativa y reproducible.","title":"Nix + Home-manager para entornos de desarrollo en WSL"},{"content":"Hola de nuevo, Mi nombre es Alfonso, un ingeniero biomédico mexicano y pronto estudiante de la maestría en ciencias de la computación. Desde siempre me han gustado las ciencias naturales y exactas, pero hace poco fue que descubrí mi amor por la programación. Disfruto mucho aprender por mi cuenta sobre mis diversos intereses: programación, imagenología médica, matemáticas, inteligencia artificial, idiomas, etcétera. Me encanta compartir mi conocimiento y enseñarle a otros, así que crear un sitio web parecía una excelente idea.\nOtros de mis hobbies son cantar, ejercitarme, leer y salir en busca de buena comida. Quiero dedicarme a la investigación y la enseñanza en alguna universidad, aunque no descarto la idea de seguir compartiendo mi conocimiento en línea. He trabajado en algunos proyectos de investigación relacionados al procesamiento de imágenes y señales médicas con inteligencia artificial. Para una mejor descripción de mi vida académica y laboral, te invito a checar mi CV\nRetrato abstracto (2016)\n","permalink":"https://www.atorizv.tech/es/about/","summary":"Hola de nuevo, Mi nombre es Alfonso, un ingeniero biomédico mexicano y pronto estudiante de la maestría en ciencias de la computación. Desde siempre me han gustado las ciencias naturales y exactas, pero hace poco fue que descubrí mi amor por la programación. Disfruto mucho aprender por mi cuenta sobre mis diversos intereses: programación, imagenología médica, matemáticas, inteligencia artificial, idiomas, etcétera. Me encanta compartir mi conocimiento y enseñarle a otros, así que crear un sitio web parecía una excelente idea.","title":"Acerca de mi"}]